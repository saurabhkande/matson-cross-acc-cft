version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17
  pre_build:
    commands:
      - echo Nothing to do in the pre_build phase...moving on...
      
  build:
    commands:
      # - echo "Deploying index file to S3"
      # - aws s3 cp ./index.html s3://ssk-static-buk-hosting/
      # - echo "Invalidating the cloud-front-distribution"
      # - aws cloudfront create-invalidation --distribution-id ETX0A9UKUMSZB --paths "/*.html"
      # - echo "Invalidation completed"
      - cd ./HelloLambda
      - mvn clean package
      - echo Build completed on `date`
      - ls ./target
  post_build:
    commands:
      - echo copying jar file to s3 bucket
      - aws s3 cp ./target/lambda-java-example-1.0-SNAPSHOT.jar s3://ssk-cft-2/new-jar/lambda-java-example-1.0-SNAPSHOT.jar
      - zip -r ../lambda.zip ./target/lambda-java-example-1.0-SNAPSHOT.jar
      - aws s3 cp ../lambda.zip s3://ssk-cft-2/lambda-zip/lambda.zip
      - echo "Running Check on lambda function"
      - cd ..
      - chmod 777 ./lambda.sh
      - aws sts assume-role --role-arn arn:aws:iam::787367675716:role/service-role/dic-app-function-role-a51sj17k --role-session-name "AssumeRoleForLambda" > assume-role-output.json
      - export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' assume-role-output.json)
      - export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' assume-role-output.json)
      - export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' assume-role-output.json)
      - aws sts get-caller-identity
      - sh lambda.sh
      
    
artifacts:
  discard-paths: yes
  files:
    - HelloLambda/target/*.jar
    

